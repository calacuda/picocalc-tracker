#![no_std]
#![no_main]

extern crate alloc;

use bevy::prelude::*;
use embedded_alloc::LlffHeap as Heap;
use hal::entry;
// use picocalc_bevy::PicoCalcDefaultPlugins;
pub use picocalc_bevy::hal;

// Tell the Boot ROM about our application
#[unsafe(link_section = ".start_block")]
#[used]
pub static IMAGE_DEF: hal::block::ImageDef = hal::block::ImageDef::secure_exe();

pub mod base_plugin;

#[derive(Clone, Copy, Default, Debug, States, PartialEq, Eq, Hash)]
pub enum MainGameState {
    #[default]
    StartUp,
    StartScreen,
    SettingsScreen,
    InGame,
}

#[derive(Clone, Copy, Default, Debug, SubStates, PartialEq, Eq, Hash)]
#[source(MainGameState = MainGameState::InGame)]
pub enum InGameState {
    #[default]
    NotInGame,
    Normal,
    LevelGen,
}

#[global_allocator]
static HEAP: Heap = Heap::empty();
const HEAP_SIZE: usize = 128 * 1024;

#[entry]
fn main() -> ! {
    init_heap();

    // let pos = Point3::new(0.0, 2.0, 0.0);
    // let looking_at = pos + Vector3::new(0.0_f32.cos(), 0.0_f32.sin(), 0.0_f32.sin());

    App::new()
        .add_plugins(base_plugin::BasePlugin)
        // .insert_resource(DoubleBufferRes::new(PlayerLocation {
        //     pos,
        //     looking_at,
        //     ..default()
        // }))
        // .insert_resource(Engine3d::new(320, 320))
        // .add_systems(Startup, (setup))
        // .add_systems(Update, to_in_game.run_if(in_state(MainGameState::StartUp)))
        // .add_systems(Update, to_expanding.run_if(in_state(MainGameState::InGame)))
        .add_systems(Startup, setup)
        .run();

    loop {}
}

fn setup(mut cmds: Commands) {
    // cmds.spawn(TextComponent {
    //     text: "Frames Rendered:".into(),
    //     point: Point::new(10, 10),
    // });
}

#[allow(static_mut_refs)]
fn init_heap() {
    use core::mem::MaybeUninit;
    static mut HEAP_MEM: [MaybeUninit<u8>; HEAP_SIZE] = [MaybeUninit::uninit(); HEAP_SIZE];
    unsafe { HEAP.init(HEAP_MEM.as_ptr() as usize, HEAP_SIZE) }
}

/// Program metadata for `picotool info`
#[unsafe(link_section = ".bi_entries")]
#[used]
pub static PICOTOOL_ENTRIES: [hal::binary_info::EntryAddr; 5] = [
    hal::binary_info::rp_cargo_bin_name!(),
    hal::binary_info::rp_cargo_version!(),
    hal::binary_info::rp_program_description!(c"PicoCalc-Tracker"),
    hal::binary_info::rp_cargo_homepage_url!(),
    hal::binary_info::rp_program_build_attribute!(),
];
